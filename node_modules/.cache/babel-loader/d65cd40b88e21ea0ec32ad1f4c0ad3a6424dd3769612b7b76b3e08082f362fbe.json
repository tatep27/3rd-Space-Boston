{"ast":null,"code":"import eventsData from '../data/events.json';\nexport const getAllEvents = () => {\n  return eventsData;\n};\nexport const getUpcomingEvents = () => {\n  const today = new Date().toISOString().split('T')[0];\n  return eventsData.filter(event => event.date >= today);\n};\nexport const filterEvents = (events, filters) => {\n  return events.filter(event => {\n    const matchesSearch = !filters.search || event.title.toLowerCase().includes(filters.search.toLowerCase()) || event.description.toLowerCase().includes(filters.search.toLowerCase()) || event.communityName.toLowerCase().includes(filters.search.toLowerCase()) || event.spaceName.toLowerCase().includes(filters.search.toLowerCase());\n    const matchesType = !filters.communityType || event.communityType === filters.communityType;\n    const matchesPublic = !filters.isOpenToPublic || event.isOpenToPublic;\n    const matchesCost = !filters.cost || filters.cost === 'free' && event.cost === 'Free' || filters.cost === 'paid' && event.cost !== 'Free';\n    return matchesSearch && matchesType && matchesPublic && matchesCost;\n  });\n};\nexport const getEventById = id => {\n  return eventsData.find(event => event.id === id);\n};\nexport const sortEventsByDate = events => {\n  return [...events].sort((a, b) => {\n    const dateA = new Date(`${a.date}T${a.time}`);\n    const dateB = new Date(`${b.date}T${b.time}`);\n    return dateA.getTime() - dateB.getTime();\n  });\n};","map":{"version":3,"names":["eventsData","getAllEvents","getUpcomingEvents","today","Date","toISOString","split","filter","event","date","filterEvents","events","filters","matchesSearch","search","title","toLowerCase","includes","description","communityName","spaceName","matchesType","communityType","matchesPublic","isOpenToPublic","matchesCost","cost","getEventById","id","find","sortEventsByDate","sort","a","b","dateA","time","dateB","getTime"],"sources":["/Users/tatepark/Projects/community_project/community_project_MVP0/src/services/eventsService.ts"],"sourcesContent":["import eventsData from '../data/events.json';\nimport { Event } from '../types';\n\nexport const getAllEvents = (): Event[] => {\n  return eventsData as Event[];\n};\n\nexport const getUpcomingEvents = (): Event[] => {\n  const today = new Date().toISOString().split('T')[0];\n  return eventsData.filter(event => event.date >= today) as Event[];\n};\n\nexport const filterEvents = (events: Event[], filters: {\n  search: string;\n  communityType: string;\n  isOpenToPublic: boolean;\n  cost: string;\n}): Event[] => {\n  return events.filter(event => {\n    const matchesSearch = !filters.search || \n      event.title.toLowerCase().includes(filters.search.toLowerCase()) ||\n      event.description.toLowerCase().includes(filters.search.toLowerCase()) ||\n      event.communityName.toLowerCase().includes(filters.search.toLowerCase()) ||\n      event.spaceName.toLowerCase().includes(filters.search.toLowerCase());\n    \n    const matchesType = !filters.communityType || event.communityType === filters.communityType;\n    \n    const matchesPublic = !filters.isOpenToPublic || event.isOpenToPublic;\n    \n    const matchesCost = !filters.cost || \n      (filters.cost === 'free' && event.cost === 'Free') ||\n      (filters.cost === 'paid' && event.cost !== 'Free');\n    \n    return matchesSearch && matchesType && matchesPublic && matchesCost;\n  });\n};\n\nexport const getEventById = (id: number): Event | undefined => {\n  return eventsData.find(event => event.id === id) as Event;\n};\n\nexport const sortEventsByDate = (events: Event[]): Event[] => {\n  return [...events].sort((a, b) => {\n    const dateA = new Date(`${a.date}T${a.time}`);\n    const dateB = new Date(`${b.date}T${b.time}`);\n    return dateA.getTime() - dateB.getTime();\n  });\n};\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,qBAAqB;AAG5C,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAe;EACzC,OAAOD,UAAU;AACnB,CAAC;AAED,OAAO,MAAME,iBAAiB,GAAGA,CAAA,KAAe;EAC9C,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACpD,OAAON,UAAU,CAACO,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,IAAIN,KAAK,CAAC;AACxD,CAAC;AAED,OAAO,MAAMO,YAAY,GAAGA,CAACC,MAAe,EAAEC,OAK7C,KAAc;EACb,OAAOD,MAAM,CAACJ,MAAM,CAACC,KAAK,IAAI;IAC5B,MAAMK,aAAa,GAAG,CAACD,OAAO,CAACE,MAAM,IACnCN,KAAK,CAACO,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACL,OAAO,CAACE,MAAM,CAACE,WAAW,CAAC,CAAC,CAAC,IAChER,KAAK,CAACU,WAAW,CAACF,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACL,OAAO,CAACE,MAAM,CAACE,WAAW,CAAC,CAAC,CAAC,IACtER,KAAK,CAACW,aAAa,CAACH,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACL,OAAO,CAACE,MAAM,CAACE,WAAW,CAAC,CAAC,CAAC,IACxER,KAAK,CAACY,SAAS,CAACJ,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACL,OAAO,CAACE,MAAM,CAACE,WAAW,CAAC,CAAC,CAAC;IAEtE,MAAMK,WAAW,GAAG,CAACT,OAAO,CAACU,aAAa,IAAId,KAAK,CAACc,aAAa,KAAKV,OAAO,CAACU,aAAa;IAE3F,MAAMC,aAAa,GAAG,CAACX,OAAO,CAACY,cAAc,IAAIhB,KAAK,CAACgB,cAAc;IAErE,MAAMC,WAAW,GAAG,CAACb,OAAO,CAACc,IAAI,IAC9Bd,OAAO,CAACc,IAAI,KAAK,MAAM,IAAIlB,KAAK,CAACkB,IAAI,KAAK,MAAO,IACjDd,OAAO,CAACc,IAAI,KAAK,MAAM,IAAIlB,KAAK,CAACkB,IAAI,KAAK,MAAO;IAEpD,OAAOb,aAAa,IAAIQ,WAAW,IAAIE,aAAa,IAAIE,WAAW;EACrE,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAME,YAAY,GAAIC,EAAU,IAAwB;EAC7D,OAAO5B,UAAU,CAAC6B,IAAI,CAACrB,KAAK,IAAIA,KAAK,CAACoB,EAAE,KAAKA,EAAE,CAAC;AAClD,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAInB,MAAe,IAAc;EAC5D,OAAO,CAAC,GAAGA,MAAM,CAAC,CAACoB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IAChC,MAAMC,KAAK,GAAG,IAAI9B,IAAI,CAAC,GAAG4B,CAAC,CAACvB,IAAI,IAAIuB,CAAC,CAACG,IAAI,EAAE,CAAC;IAC7C,MAAMC,KAAK,GAAG,IAAIhC,IAAI,CAAC,GAAG6B,CAAC,CAACxB,IAAI,IAAIwB,CAAC,CAACE,IAAI,EAAE,CAAC;IAC7C,OAAOD,KAAK,CAACG,OAAO,CAAC,CAAC,GAAGD,KAAK,CAACC,OAAO,CAAC,CAAC;EAC1C,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}