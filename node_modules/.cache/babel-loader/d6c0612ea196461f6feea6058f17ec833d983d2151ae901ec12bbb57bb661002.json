{"ast":null,"code":"import eventsData from'../data/events.json';export const getAllEvents=()=>{return eventsData;};export const getUpcomingEvents=()=>{const today=new Date().toISOString().split('T')[0];return eventsData.filter(event=>event.date>=today);};export const filterEvents=(events,filters)=>{return events.filter(event=>{const matchesSearch=!filters.search||event.title.toLowerCase().includes(filters.search.toLowerCase())||event.description.toLowerCase().includes(filters.search.toLowerCase())||event.communityName.toLowerCase().includes(filters.search.toLowerCase())||event.spaceName.toLowerCase().includes(filters.search.toLowerCase());const matchesType=!filters.communityType||event.communityType===filters.communityType;const matchesPublic=!filters.isOpenToPublic||event.isOpenToPublic;const matchesCost=!filters.cost||filters.cost==='free'&&event.cost==='Free'||filters.cost==='paid'&&event.cost!=='Free';return matchesSearch&&matchesType&&matchesPublic&&matchesCost;});};export const getEventById=id=>{return eventsData.find(event=>event.id===id);};export const sortEventsByDate=events=>{return[...events].sort((a,b)=>{const dateA=new Date(\"\".concat(a.date,\"T\").concat(a.time));const dateB=new Date(\"\".concat(b.date,\"T\").concat(b.time));return dateA.getTime()-dateB.getTime();});};","map":{"version":3,"names":["eventsData","getAllEvents","getUpcomingEvents","today","Date","toISOString","split","filter","event","date","filterEvents","events","filters","matchesSearch","search","title","toLowerCase","includes","description","communityName","spaceName","matchesType","communityType","matchesPublic","isOpenToPublic","matchesCost","cost","getEventById","id","find","sortEventsByDate","sort","a","b","dateA","concat","time","dateB","getTime"],"sources":["/Users/tatepark/Projects/community_project/community_project_MVP0/src/services/eventsService.ts"],"sourcesContent":["import eventsData from '../data/events.json';\nimport { Event } from '../types';\n\nexport const getAllEvents = (): Event[] => {\n  return eventsData as Event[];\n};\n\nexport const getUpcomingEvents = (): Event[] => {\n  const today = new Date().toISOString().split('T')[0];\n  return eventsData.filter(event => event.date >= today) as Event[];\n};\n\nexport const filterEvents = (events: Event[], filters: {\n  search: string;\n  communityType: string;\n  isOpenToPublic: boolean;\n  cost: string;\n}): Event[] => {\n  return events.filter(event => {\n    const matchesSearch = !filters.search || \n      event.title.toLowerCase().includes(filters.search.toLowerCase()) ||\n      event.description.toLowerCase().includes(filters.search.toLowerCase()) ||\n      event.communityName.toLowerCase().includes(filters.search.toLowerCase()) ||\n      event.spaceName.toLowerCase().includes(filters.search.toLowerCase());\n    \n    const matchesType = !filters.communityType || event.communityType === filters.communityType;\n    \n    const matchesPublic = !filters.isOpenToPublic || event.isOpenToPublic;\n    \n    const matchesCost = !filters.cost || \n      (filters.cost === 'free' && event.cost === 'Free') ||\n      (filters.cost === 'paid' && event.cost !== 'Free');\n    \n    return matchesSearch && matchesType && matchesPublic && matchesCost;\n  });\n};\n\nexport const getEventById = (id: number): Event | undefined => {\n  return eventsData.find(event => event.id === id) as Event;\n};\n\nexport const sortEventsByDate = (events: Event[]): Event[] => {\n  return [...events].sort((a, b) => {\n    const dateA = new Date(`${a.date}T${a.time}`);\n    const dateB = new Date(`${b.date}T${b.time}`);\n    return dateA.getTime() - dateB.getTime();\n  });\n};\n"],"mappings":"AAAA,MAAO,CAAAA,UAAU,KAAM,qBAAqB,CAG5C,MAAO,MAAM,CAAAC,YAAY,CAAGA,CAAA,GAAe,CACzC,MAAO,CAAAD,UAAU,CACnB,CAAC,CAED,MAAO,MAAM,CAAAE,iBAAiB,CAAGA,CAAA,GAAe,CAC9C,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CACpD,MAAO,CAAAN,UAAU,CAACO,MAAM,CAACC,KAAK,EAAIA,KAAK,CAACC,IAAI,EAAIN,KAAK,CAAC,CACxD,CAAC,CAED,MAAO,MAAM,CAAAO,YAAY,CAAGA,CAACC,MAAe,CAAEC,OAK7C,GAAc,CACb,MAAO,CAAAD,MAAM,CAACJ,MAAM,CAACC,KAAK,EAAI,CAC5B,KAAM,CAAAK,aAAa,CAAG,CAACD,OAAO,CAACE,MAAM,EACnCN,KAAK,CAACO,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACL,OAAO,CAACE,MAAM,CAACE,WAAW,CAAC,CAAC,CAAC,EAChER,KAAK,CAACU,WAAW,CAACF,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACL,OAAO,CAACE,MAAM,CAACE,WAAW,CAAC,CAAC,CAAC,EACtER,KAAK,CAACW,aAAa,CAACH,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACL,OAAO,CAACE,MAAM,CAACE,WAAW,CAAC,CAAC,CAAC,EACxER,KAAK,CAACY,SAAS,CAACJ,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACL,OAAO,CAACE,MAAM,CAACE,WAAW,CAAC,CAAC,CAAC,CAEtE,KAAM,CAAAK,WAAW,CAAG,CAACT,OAAO,CAACU,aAAa,EAAId,KAAK,CAACc,aAAa,GAAKV,OAAO,CAACU,aAAa,CAE3F,KAAM,CAAAC,aAAa,CAAG,CAACX,OAAO,CAACY,cAAc,EAAIhB,KAAK,CAACgB,cAAc,CAErE,KAAM,CAAAC,WAAW,CAAG,CAACb,OAAO,CAACc,IAAI,EAC9Bd,OAAO,CAACc,IAAI,GAAK,MAAM,EAAIlB,KAAK,CAACkB,IAAI,GAAK,MAAO,EACjDd,OAAO,CAACc,IAAI,GAAK,MAAM,EAAIlB,KAAK,CAACkB,IAAI,GAAK,MAAO,CAEpD,MAAO,CAAAb,aAAa,EAAIQ,WAAW,EAAIE,aAAa,EAAIE,WAAW,CACrE,CAAC,CAAC,CACJ,CAAC,CAED,MAAO,MAAM,CAAAE,YAAY,CAAIC,EAAU,EAAwB,CAC7D,MAAO,CAAA5B,UAAU,CAAC6B,IAAI,CAACrB,KAAK,EAAIA,KAAK,CAACoB,EAAE,GAAKA,EAAE,CAAC,CAClD,CAAC,CAED,MAAO,MAAM,CAAAE,gBAAgB,CAAInB,MAAe,EAAc,CAC5D,MAAO,CAAC,GAAGA,MAAM,CAAC,CAACoB,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAK,CAChC,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAA9B,IAAI,IAAA+B,MAAA,CAAIH,CAAC,CAACvB,IAAI,MAAA0B,MAAA,CAAIH,CAAC,CAACI,IAAI,CAAE,CAAC,CAC7C,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAAjC,IAAI,IAAA+B,MAAA,CAAIF,CAAC,CAACxB,IAAI,MAAA0B,MAAA,CAAIF,CAAC,CAACG,IAAI,CAAE,CAAC,CAC7C,MAAO,CAAAF,KAAK,CAACI,OAAO,CAAC,CAAC,CAAGD,KAAK,CAACC,OAAO,CAAC,CAAC,CAC1C,CAAC,CAAC,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}